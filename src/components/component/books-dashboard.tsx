/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/QBaSswNBxPc
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { SVGProps, useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { DialogOverlay } from "@radix-ui/react-dialog";

type Book = {
  id?: number;
  title: string;
  author: string;
  publicationYear: number;
  quantity: number;
};

const defaultBook: Book = {
  title: "",
  author: "",
  publicationYear: new Date().getFullYear(),
  quantity: 0,
};

export function BookDashboard() {
  const [books, setBooks] = useState<Array<Book>>([
    {
      id: 1,
      title: "The Great Gatsby",
      author: "F. Scott Fitzgerald",
      publicationYear: 1925,
      quantity: 10,
    },
    {
      id: 2,
      title: "To Kill a Mockingbird",
      author: "Harper Lee",
      publicationYear: 1960,
      quantity: 5,
    },
    {
      id: 3,
      title: "1984",
      author: "George Orwell",
      publicationYear: 1949,
      quantity: 0,
    },
    {
      id: 4,
      title: "Pride and Prejudice",
      author: "Jane Austen",
      publicationYear: 1813,
      quantity: 7,
    },
  ]);

  const [selectedBook, setSelectedBook] = useState<undefined | Book>(undefined);
  const [showForm, setShowForm] = useState<boolean>(false);
  const [newBook, setNewBook] = useState<Book>(defaultBook);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);

  const handleSaveBook = () => {
    setBooks([...books, { ...newBook, id: books.length + 1 }]);
    setNewBook(defaultBook);
    setShowForm(false);
  };
  const handleEditBook = (book: Book) => {
    setSelectedBook(book);
    setShowForm(true);
  };
  const handleUpdateBook = () => {
    if (!selectedBook) return;
    setBooks(
      books.map((book) =>
        book.id === selectedBook.id ? { ...selectedBook } : book
      )
    );
    setShowForm(false);
  };

  const handleDeleteBook = (id: Book["id"]) => {
    setBooks(books.filter((book) => book.id !== id));
    setShowDeleteConfirmation(false);
  };

  const handleDeleteConfirmation = (id: Book["id"]) => {
    setShowDeleteConfirmation(true);
    setSelectedBook(books.find((book: Book) => book.id === id));
  };

  useEffect(() => {
    if (!showForm && !showDeleteConfirmation) setSelectedBook(undefined);
  }, [showForm, showDeleteConfirmation, books]);

  return (
    <div className="max-w-6xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
      <header className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold">Panel de administración</h1>
        <Button size="sm" onClick={() => setShowForm(true)}>
          Agregar libro
        </Button>
      </header>
      {/* Tabla de libros */}
      <div className="bg-background rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-bold mb-4">Libros</h2>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Titulo</TableHead>
              <TableHead>Autor</TableHead>
              <TableHead>Stock</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {books.map((book) => (
              <TableRow key={book.id}>
                <TableCell className="font-medium">
                  <Link
                    href="#"
                    onClick={() => setSelectedBook(book)}
                    className="hover:text-primary"
                    prefetch={false}
                  >
                    {book.title}
                  </Link>
                </TableCell>
                <TableCell>{book.author}</TableCell>
                <TableCell>
                  <Badge
                    variant={book.quantity > 0 ? "secondary" : "destructive"}
                    className="px-2 py-1 rounded-full text-xs"
                  >
                    {book.quantity > 0
                      ? `${book.quantity} Libro${book.quantity > 1 ? "s" : ""}`
                      : "Agotado"}
                  </Badge>
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => handleEditBook(book)}
                    >
                      <FilePenIcon className="w-4 h-4" />
                    </Button>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => handleDeleteConfirmation(book.id)}
                    >
                      <TrashIcon className="w-4 h-4" />
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Modal de agregar o editar libros */}
      <Dialog open={showForm} onOpenChange={(open) => setShowForm(open)}>
        <DialogOverlay className="DialogOverlay" />
        <DialogContent className="bg-background rounded-lg shadow-lg p-6 mb-6">
          <DialogHeader>
            <DialogTitle>
              {selectedBook ? "Editar libro" : "Agregar libro"}
            </DialogTitle>
          </DialogHeader>
          <div>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                selectedBook ? handleUpdateBook() : handleSaveBook();
              }}
              className="grid grid-cols-1 sm:grid-cols-2 gap-4"
            >
              <div>
                <Label htmlFor="title">Titulo</Label>
                <Input
                  id="title"
                  value={selectedBook?.title || newBook.title}
                  onChange={(e) =>
                    selectedBook
                      ? setSelectedBook({
                          ...selectedBook,
                          title: e.target.value,
                        })
                      : setNewBook({ ...newBook, title: e.target.value })
                  }
                  required
                />
              </div>
              <div>
                <Label htmlFor="author">Autor</Label>
                <Input
                  id="author"
                  value={selectedBook?.author || newBook.author}
                  onChange={(e) =>
                    selectedBook
                      ? setSelectedBook({
                          ...selectedBook,
                          author: e.target.value,
                        })
                      : setNewBook({ ...newBook, author: e.target.value })
                  }
                  required
                />
              </div>
              <div>
                <Label htmlFor="publicationYear">Año de publicación</Label>
                <Input
                  id="publicationYear"
                  type="number"
                  value={
                    selectedBook?.publicationYear || newBook.publicationYear
                  }
                  onChange={(e) =>
                    selectedBook
                      ? setSelectedBook({
                          ...selectedBook,
                          publicationYear: parseInt(e.target.value),
                        })
                      : setNewBook({
                          ...newBook,
                          publicationYear: parseInt(e.target.value),
                        })
                  }
                  required
                />
              </div>
              <div>
                <Label htmlFor="quantity">Disponibilidad</Label>
                <Input
                  id="quantity"
                  type="number"
                  min={0}
                  max={10000}
                  value={selectedBook?.quantity || newBook.quantity}
                  onChange={(e) =>
                    selectedBook
                      ? setSelectedBook({
                          ...selectedBook,
                          quantity: parseInt(e.target.value),
                        })
                      : setNewBook({
                          ...newBook,
                          quantity: parseInt(e.target.value),
                        })
                  }
                  required
                />
              </div>
            </form>
          </div>
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                setShowForm(false);
              }}
            >
              Cancelar
            </Button>
            <Button
              type="submit"
              onClick={selectedBook ? handleUpdateBook : handleSaveBook}
            >
              {selectedBook ? "Guardar cambios" : "Publicar"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Modal de confirmación de eliminación de libros */}
      <Dialog
        open={showDeleteConfirmation}
        onOpenChange={(open) => setShowDeleteConfirmation(open)}
      >
        <DialogOverlay className="DialogOverlay" />
        <DialogContent>
          <DialogHeader>
            Estas seguro de que quieres eliminar? <br />
            <b className="text-destructive">"{selectedBook?.title}"</b>
          </DialogHeader>
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                setShowDeleteConfirmation(false);
              }}
            >
              Cancelar
            </Button>
            <Button
              variant="destructive"
              type="submit"
              onClick={() => selectedBook && handleDeleteBook(selectedBook.id)}
            >
              Eliminar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

function FilePenIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  );
}

function TrashIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  );
}
